import math


class Figure:

    def __init__(self, red, green, blue, sised_count):
        self.red = red
        self.green = green
        self.blue = blue
        self.sised_count = sised_count
        self.__color = []
        self.list_color = []
        self.filled = False
        self.__sides = []
        self.list_sides = []
        self.sides_check = False

    def get_color(self):
        self.list_color.append(self.red)
        self.list_color.append(self.green)
        self.list_color.append(self.blue)
        return self.list_color

    def __is_valid_color(self):
        count = 0
        for color in self.list_color:
            if 0 <= color <= 255 and isinstance(color, int):
                count += 1
        if count == 3:
            self.filled = True
            print("Цвет изменен")
        else:
            print("Не корректные значения цвета")

    def set_color(self):
        if self.filled == True:
            for new_color in self.list_color:
                self._Figure__color.append(new_color)
        return self.__color

    def __is_valid_sides(self, *other_sides):
        for new_sides in other_sides:
            if new_sides > 0 and isinstance(new_sides, int):
                self.list_sides.append(new_sides)
        if len(self.list_sides) == self.sised_count:
            self.sides_check = True
            return self.list_sides
        else:
            self.sides = []
            num_ = 1
            for i in range(self.sised_count):
                self.sides.append(num_)
        print(f'Кол-во сторон должно быть: {self.sides}')

    def get_sides(self):
        if self.sides_check == True:
            for sides in self.list_sides:
                self.__sides.append(sides)
            return self.__sides
        else:
            return ''

    def __len__(self):
        if self.sides_check == True:
            self.perimetr = len(self.__sides) * self.__sides[0]
            return self.perimetr
        else:
            return ''


class Circle(Figure):

    def __init__(self, red, green, blue, sised_count=1):
        super().__init__(red, green, blue, sised_count)

    def __radius(self):
        if self.sides_check == True:
            self.rad = 0
            self.rad = self.perimetr / math.pi
            return round(self.rad, 2)
        else:
            return ''

    def get_square(self):
        if self.sides_check == True:
            self.square = 0
            self.square = math.pi * self.rad ** 2
            return round(self.square, 2)
        else:
            return ''


circle = Circle(300, 200, 150) # проверка на цвет
#circle = Circle(100, 200, 150) # проверка на цвет
circle.get_color()
circle._Figure__is_valid_color()
print('Цвет круга:', circle.set_color())
circle._Figure__is_valid_sides(8, 2) # проверка на кол-во сторон
#circle._Figure__is_valid_sides(8) # проверка на кол-во сторон
print('Сторона круга:', circle.get_sides())
print('Периметр круга:', circle.__len__())
print('Радиус круга:', circle._Circle__radius())
print(f'Площадь круга:{circle.get_square()}\n')


class Triangle(Figure):

    def __init__(self, red, green, blue, sised_count=3):
        super().__init__(red, green, blue, sised_count)

    def get_square(self):
        if self.sides_check == True:
            self.p = 0  # периметр
            self.pp = 0  # полупериметр
            self.square = 0
            for i in self._Figure__sides:
                self.p += i
            self.pp = self.p / 2
            self.square = math.sqrt(
                self.pp * (self.pp - self._Figure__sides[0]) * (self.pp - self._Figure__sides[1]) * (
                            self.pp - self._Figure__sides[2]))
            return round(self.square, 2)
        else:
            return ''


#triangle = Triangle(230, 580, 10) # проверка на цвет
triangle = Triangle(230, 180, 10) # проверка на цвет
triangle.get_color()
triangle._Figure__is_valid_color()
print('Цвет треугольника:', triangle.set_color())
#triangle._Figure__is_valid_sides(5, 5) # проверка на кол-во сторон
triangle._Figure__is_valid_sides(5, 5, 5) # проверка на кол-во сторон
print('Стороны треугольника:', triangle.get_sides())
print('Периметр треугольника:', triangle.__len__())
print(f'Площадь треугольника:{triangle.get_square()}\n')


class Cube(Figure):

    def __init__(self, red, green, blue, sised_count=12):
        super().__init__(red, green, blue, sised_count)

    def get_volume(self):
        if self.sides_check == True:
            self.volume = 0
            self.volume = self._Figure__sides[0] ** 3
            return self.volume
        else:
            return ''


#cube = Cube(100, 200, 450) # проверка на цвет
cube = Cube(100, 200, 150) # проверка на цвет
cube.get_color()
cube._Figure__is_valid_color()
print('Цвет куба:', cube.set_color())
#cube._Figure__is_valid_sides(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2) # проверка на кол-во сторон
cube._Figure__is_valid_sides(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2) # проверка на кол-во сторон
print('Стороны куба:', cube.get_sides())
print('Периметр куба:', cube.__len__())
print('Объем куба:', cube.get_volume())
